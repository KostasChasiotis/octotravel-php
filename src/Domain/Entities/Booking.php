<?php

namespace KostasChasiotis\OctoTravel\Domain\Entities;

use DateTimeImmutable;
use KostasChasiotis\OctoTravel\Domain\Enums\BookingStatus;
use KostasChasiotis\OctoTravel\Domain\ValueObjects\DeliveryMethods;
use KostasChasiotis\OctoTravel\Domain\ValueObjects\Uuid;

/**
 * The booking object
 */

class Booking
{
    /**
     * A unique ID / UUID generated by the supplier system to identify the booking.
     * 
     * @var string
     */
    private string $id;

    /**
     * A UUID you can set when generating the booking to use as an idempotency key.
     * 
     * @var Uuid
     */
    private Uuid $uuid;

    /**
     * If TRUE, booking was created on test mode
     * 
     * @var bool
     */
    private bool $testMode;

    /**
     * The reference set by the Reseller. A mandatory field for resellers to be set in the booking confirmation request.
     * 
     * @var null|string
     */
    private ?string $resellerReference;

    /**
     * The Supplier's / booking platform reference.
     * 
     * @var null|string
     */
    private ?string $supplierReference;

    /**
     * The status of the booking.
     * 
     * @var BookingStatus
     */
    private BookingStatus $status;

    /**
     * An ISO8601 date time in UTC when the booking was created.
     * 
     * @var DateTimeImmutable
     */
    private DateTimeImmutable $utcCreatedAt;

    /**
     * An ISO8601 date time in UTC when the booking was updated.
     * 
     * @var null|DateTimeImmutable
     */
    private ?DateTimeImmutable $utcUpdatedAt;

    /**
     * An ISO8601 date times in UTC for when this booking is due to expire if the status is ON_HOLD.
     * 
     * @var null|DateTimeImmutable
     */
    private ?DateTimeImmutable $utcExpiresAt;

    /**
     * An ISO8601 date time in UTC at when the booking was redeemed.
     * 
     * @var null|DateTimeImmutable
     */
    private ?DateTimeImmutable $utcRedeemedAt;

    /**
     * An ISO8601 date time in UTC when the booking was confirmed.
     * 
     * @var null|DateTimeImmutable
     */
    private ?DateTimeImmutable $utcConfirmedAt;

    /**
     * The product ID that identifies the product in the booking system to make this reservation.
     * 
     * @var string
     */
    private string $productId;

    /**
     * A bookable product listed by a supplier.
     * 
     * @var Product
     */
    private Product $product;

    /**
     * The option ID that identifies the product option in the booking system to make this reservation.
     * 
     * @var string
     */
    private string $optionId;

    /**
     * Product options are subdivisions of the original product that will affect price and / or duration. 
     * 
     * Within the OCTo spec, every product must contain an option.
     * 
     * @var Option
     */
    private Option $option;

    /**
     * A boolean field indicating whether this booking can be cancelled.
     * 
     * @var bool
     */
    private bool $cancellable;

    /**
     * An object with information about why and when the booking was cancelled. 
     * 
     * This is NULL if the booking is not cancelled.
     * 
     * @var null|Cancellation
     */
    private ?Cancellation $cancellation;

    /**
     * Whether the booking was made as freesale (without checking availability first).
     * 
     * @var bool
     */
    private bool $freesale;

    /**
     * The availability id that was used in the request.
     * 
     * @var string
     */
    private string $availabilityId;

    /**
     * The availability object that was booked.
     * 
     * @var Availability
     */
    private Availability $availability;

    /**
     * Contact details for the guests that will attend the tour/attraction. 
     * 
     * Contact schema can be applied to both the booking object (the main reservation) 
     * or the unit object (individual ticket holders - if the supplier requires this information)
     * 
     * @var Contact
     */
    private Contact $contact;

    /**
     * Optional notes for the booking
     * 
     * @var null|string
     */
    private ?string $notes;

    /**
     * An array of delivery methods available for this booking.
     * 
     * @var DeliveryMethods
     */
    private DeliveryMethods $deliveryMethods;

    /**
     * The booking voucher
     * 
     * @var null|Ticket
     */
    private ?Ticket $voucher;

    /**
     * An array of unit items that will be included in the booking.
     * 
     * @var null|UnitItems
     */
    private UnitItems $unitItems;

    public function __construct(
        string $id,
        Uuid $uuid,
        bool $testMode,
        ?string $resellerReference,
        ?string $supplierReference,
        BookingStatus $status,
        DateTimeImmutable $utcCreatedAt,
        ?DateTimeImmutable $utcUpdatedAt,
        ?DateTimeImmutable $utcExpiresAt,
        ?DateTimeImmutable $utcRedeemedAt,
        ?DateTimeImmutable $utcConfirmedAt,
        string $productId,
        Product $product,
        string $optionId,
        Option $option,
        bool $cancellable,
        ?Cancellation $cancellation,
        bool $freesale,
        string $availabilityId,
        Availability $availability,
        Contact $contact,
        ?string $notes,
        DeliveryMethods $deliveryMethods,
        ?Ticket $voucher,
        ?UnitItems $unitItems
    ) {
        $this->id = $id;
        $this->uuid = $uuid;
        $this->testMode = $testMode;
        $this->resellerReference = $resellerReference;
        $this->supplierReference = $supplierReference;
        $this->status = $status;
        $this->utcCreatedAt = $utcCreatedAt;
        $this->utcUpdatedAt = $utcUpdatedAt;
        $this->utcExpiresAt = $utcExpiresAt;
        $this->utcRedeemedAt = $utcRedeemedAt;
        $this->utcConfirmedAt = $utcConfirmedAt;
        $this->productId = $productId;
        $this->product = $product;
        $this->optionId = $optionId;
        $this->option = $option;
        $this->cancellable = $cancellable;
        $this->cancellation = $cancellation;
        $this->freesale = $freesale;
        $this->availabilityId = $availabilityId;
        $this->availability = $availability;
        $this->contact = $contact;
        $this->notes = $notes;
        $this->deliveryMethods = $deliveryMethods;
        $this->voucher = $voucher;
        $this->unitItems = $unitItems;
    }

    /**
     * Get a unique ID / UUID generated by the supplier system to identify the booking.
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Get a UUID you can set when generating the booking to use as an idempotency key.
     *
     * @return Uuid
     */
    public function getUuid(): Uuid
    {
        return $this->uuid;
    }

    /**
     * Get if TRUE, booking was created on test mode
     *
     * @return bool
     */
    public function getTestMode(): bool
    {
        return $this->testMode;
    }

    /**
     * Get the reference set by the Reseller. A mandatory field for resellers to be set in the booking confirmation request.
     *
     * @return null|string
     */
    public function getResellerReference(): ?string
    {
        return $this->resellerReference;
    }

    /**
     * Get the Supplier's / booking platform reference.
     *
     * @return null|string
     */
    public function getSupplierReference(): ?string
    {
        return $this->supplierReference;
    }

    /**
     * Get the status of the booking.
     *
     * @return BookingStatus
     */
    public function getStatus(): BookingStatus
    {
        return $this->status;
    }

    /**
     * Get an ISO8601 date time in UTC when the booking was created.
     *
     * @return DateTimeImmutable
     */
    public function getUtcCreatedAt(): DateTimeImmutable
    {
        return $this->utcCreatedAt;
    }

    /**
     * Get an ISO8601 date time in UTC when the booking was updated.
     *
     * @return null|DateTimeImmutable
     */
    public function getUtcUpdatedAt(): ?DateTimeImmutable
    {
        return $this->utcUpdatedAt;
    }

    /**
     * Get an ISO8601 date times in UTC for when this booking is due to expire if the status is ON_HOLD.
     *
     * @return null|DateTimeImmutable
     */
    public function getUtcExpiresAt(): ?DateTimeImmutable
    {
        return $this->utcExpiresAt;
    }

    /**
     * Get an ISO8601 date time in UTC at when the booking was redeemed.
     *
     * @return null|DateTimeImmutable
     */
    public function getUtcRedeemedAt(): ?DateTimeImmutable
    {
        return $this->utcRedeemedAt;
    }

    /**
     * Get an ISO8601 date time in UTC when the booking was confirmed.
     *
     * @return null|DateTimeImmutable
     */
    public function getUtcConfirmedAt(): ?DateTimeImmutable
    {
        return $this->utcConfirmedAt;
    }

    /**
     * Get the product ID that identifies the product in the booking system to make this reservation.
     *
     * @return string
     */
    public function getProductId(): string
    {
        return $this->productId;
    }

    /**
     * Get a bookable product listed by a supplier.
     *
     * @return Product
     */
    public function getProduct(): Product
    {
        return $this->product;
    }

    /**
     * Get the option ID that identifies the product option in the booking system to make this reservation.
     *
     * @return string
     */
    public function getOptionId(): string
    {
        return $this->optionId;
    }

    /**
     * Get within the OCTo spec, every product must contain an option.
     *
     * @return Option
     */
    public function getOption(): Option
    {
        return $this->option;
    }

    /**
     * Get a boolean field indicating whether this booking can be cancelled.
     *
     * @return bool
     */
    public function getCancellable(): bool
    {
        return $this->cancellable;
    }

    /**
     * Get this is NULL if the booking is not cancelled.
     *
     * @return null|Cancellation
     */
    public function getCancellation(): ?Cancellation
    {
        return $this->cancellation;
    }

    /**
     * Get whether the booking was made as freesale (without checking availability first).
     *
     * @return bool
     */
    public function getFreesale(): bool
    {
        return $this->freesale;
    }

    /**
     * Get the availability id that was used in the request.
     *
     * @return string
     */
    public function getAvailabilityId(): string
    {
        return $this->availabilityId;
    }

    /**
     * Get the availability object that was booked.
     *
     * @return Availability
     */
    public function getAvailability(): Availability
    {
        return $this->availability;
    }

    /**
     * Get or the unit object (individual ticket holders - if the supplier requires this information)
     *
     * @return Contact
     */
    public function getContact(): Contact
    {
        return $this->contact;
    }

    /**
     * Get optional notes for the booking
     *
     * @return null|string
     */
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    /**
     * Get an array of delivery methods available for this booking.
     *
     * @return DeliveryMethods
     */
    public function getDeliveryMethods(): DeliveryMethods
    {
        return $this->deliveryMethods;
    }

    /**
     * Get the booking voucher
     *
     * @return null|Ticket
     */
    public function getVoucher(): ?Ticket
    {
        return $this->voucher;
    }

    /**
     * Get an array of unit items that will be included in the booking.
     *
     * @return null|UnitItems
     */
    public function getUnitItems(): ?UnitItems
    {
        return $this->unitItems;
    }

    /**
     * Return the Booking as an associative array
     * 
     * @return array
     */
    public function toArray(): array
    {
        return [
            'id' => $this->id,
            'uuid' => $this->uuid->toString(),
            'testMode' => $this->testMode,
            'resellerReference' => $this->resellerReference ?? null,
            'supplierReference' => $this->supplierReference ?? null,
            'status' => $this->status->value,
            'utcCreatedAt' => $this->utcCreatedAt->format('c'),
            'utcUpdatedAt' => $this->utcUpdatedAt ? $this->utcUpdatedAt->format('c') : null,
            'utcExpiresAt' => $this->utcExpiresAt ? $this->utcExpiresAt->format('c') : null,
            'utcRedeemedAt' => $this->utcRedeemedAt ? $this->utcRedeemedAt->format('c') : null,
            'utcConfirmedAt' => $this->utcConfirmedAt ? $this->utcConfirmedAt->format('c') : null,
            'productId' => $this->productId,
            'product' => $this->product->toArray(),
            'optionId' => $this->optionId,
            'option' => $this->option->toArray(),
            'cancellable' => $this->cancellable,
            'cancellation' => $this->cancellation ? $this->cancellation->toArray() : null,
            'freesale' => $this->freesale,
            'availabilityId' => $this->availabilityId,
            'availability' => $this->availability->toArray(),
            'contact' => $this->contact->toArray(),
            'notes' => $this->notes ?? null,
            'deliveryMethods' => $this->deliveryMethods->getValues(),
            'ticket' => $this->voucher ? $this->voucher->toArray() : null,
            'unitItems' => $this->unitItems ? $this->unitItems->toArray() : null
        ];
    }
}
